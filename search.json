[{"path":"/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://www.contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/.","code":""},{"path":[]},{"path":"/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"CONTRIBUTING","text":"Small typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. YES: edit roxygen comment .R file R/. : edit .Rd file man/.","code":""},{"path":"/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"CONTRIBUTING","text":"make substantial pull request, always file issue make sure someone team agrees ’s problem. ’ve found bug, create associated issue illustrate bug minimal reprex.","code":""},{"path":"/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"CONTRIBUTING","text":"recommend create Git branch pull request (PR). Look Travis CodeCovr build status making changes. follow Google’s R style guide use camelCase variable names, TitleCase function names. use Oxford ending ‘ize’ (‘ise’), UK spelling (e.g. ‘colour’) possible avoid distinction (e.g. shortening ‘col’) use roxygen2. use testthat. Contributions test cases included easier accept. use semantic versioning. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s).","code":""},{"path":"/CONTRIBUTING.html","id":"contributor-license-agreement","dir":"","previous_headings":"","what":"Contributor license agreement","title":"CONTRIBUTING","text":"Contributors agree reassign copyright contributions maintainers package.","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"CONTRIBUTING","text":"Please note project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"/CONTRIBUTING.html","id":"prefer-to-email","dir":"","previous_headings":"","what":"Prefer to Email?","title":"CONTRIBUTING","text":"Email person listed maintainer DESCRIPTION file repo. Though note private discussions email don’t help others - course email totally warranted ’s sensitive problem kind.","code":""},{"path":"/CONTRIBUTING.html","id":"thanks-for-contributing","dir":"","previous_headings":"","what":"Thanks for contributing!","title":"CONTRIBUTING","text":"contributing guide adapted tidyverse contributing guide available https://raw.githubusercontent.com/r-lib/usethis/master/inst/templates/tidy-contributing.md","code":""},{"path":"/articles/Quartet-Distance.html","id":"partition-distances","dir":"Articles","previous_headings":"","what":"Partition distances","title":"About the quartet distance","text":"Robinson-Foulds (RF ‘partition’) metric (Robinson & Foulds, 1981; Steel & Penny, 1993) measures symmetric difference two trees adding number splits (.e. groupings) present tree (tree B) number splits present tree B (tree ). useful trees compared similar; low range integer values, low maximum value, limiting ability distinguish trees (Steel & Penny, 1993); treats splits equivalent, even though informative others. Various artefacts biases limit performance suite real-world benchmarks (Smith, 2020, 2022). shortcomings can largely mitigated generalizations Robinson-Foulds distance (see R package ‘TreeDist’), complementary perspective tree similarity offered quartet-centred approach can illuminating.","code":""},{"path":"/articles/Quartet-Distance.html","id":"quartet-distances","dir":"Articles","previous_headings":"","what":"Quartet distances","title":"About the quartet distance","text":"Instead partitions, symmetric differences can measured counting number four-taxon statements (quartets) differ two trees (Day, 1986; Estabrook, McMorris, & Meacham, 1985). four tips , B, C D, split bifurcating tree separate tip either B, C D two tips. say, removing tips tree leave one three trees:  Thus two random trees share quartet (, B), (C, D), whereas third ; four tips divided (, D), (B, C).  (n4)\\binom{n}{4} groups four taxa tree nn tips; groups, one three trees consistent given tree. , two identical trees quartet distance 0, random pair trees expected (n4)/3\\binom{n}{4} / 3 quartets common. quartets independent one another, pair trees six tips can (n4)\\binom{n}{4} quartets common (Steel & Penny, 1993). Properties quartet distance explored fully Steel & Penny (1993). quartet distances 1 can accomplished small trees (five fewer leaves; see ), perhaps appropriate consider whether trees dissimilar pair random trees, whose distance , average, 23\\frac{2}{3}. (Data real trees, comparisons expected values metrics, available ()[https://ms609.github.io/TreeDistData/articles/09-expected-similarity.html].)","code":""},{"path":"/articles/Quartet-Distance.html","id":"normalization","dir":"Articles","previous_headings":"","what":"Normalization","title":"About the quartet distance","text":"Whereas counting quartets simple, accounting resolution . Two trees quartet statements common well resolved differ many details; poorly resolved perfect agreement. , important normalize quartet distances meaningful fashion. number normalizations proposed (Day, 1986; Estabrook et al., 1985); arguably appropriate Symmetric Quartet Divergence (Smith, 2019), represents total number quartets unique tree normalized total number quartets resolved. SimilarityMetrics() documentation page gives details.","code":""},{"path":"/articles/Quartet-Distance.html","id":"asymmetric-differences","dir":"Articles","previous_headings":"","what":"Asymmetric differences","title":"About the quartet distance","text":"Metric distances necessarily symmetric – , distance tree tree B equals distance B . behaviour necessarily desirable one tree represents known ‘reference’ – tree validated independent data, tree used simulate data order test phylogenetic reconstruction techniques. cases, tree might evaluated according likelihood randomly chosen quartet resolved correctly tree, uncertain resolution either reference comparison tree taken 1/3 chance correct (Asher & Smith forthcoming). details given SimilarityMetrics() documentation page.","code":""},{"path":"/articles/Quartet-Distance.html","id":"quartet-similarity-in-a-pair-of-random-trees","dir":"Articles","previous_headings":"Asymmetric differences","what":"Quartet similarity in a pair of random trees","title":"About the quartet distance","text":"average, 13\\frac{1}{3} quartets resolved pair random trees match. three quartets involving set four tips, equally likely occur truly random tree. code calculates mean proportion matching quartets 10 random trees (90 pairs) 4 20 leaves, corresponding standard deviation.","code":"round(vapply(4:20, function (nTip) {  trees <- lapply(rep(nTip, 10), TreeTools::RandomTree)  s <- ManyToManyQuartetAgreement(trees)[, , 's']  results <- s[lower.tri(s)] / choose(nTip, 4)  c(mean(results), sd(results)) }, c(mean = 0, sd = 0)), 3) ##       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]  [,8]  [,9] [,10] [,11] [,12] ## mean 0.311 0.378 0.311 0.367 0.347 0.317 0.334 0.359 0.346 0.329 0.343 0.339 ## sd   0.468 0.257 0.194 0.157 0.112 0.087 0.092 0.106 0.080 0.061 0.066 0.049 ##      [,13] [,14] [,15] [,16] [,17] ## mean 0.335  0.34 0.344 0.340 0.339 ## sd   0.044  0.06 0.048 0.045 0.029"},{"path":"/articles/Quartet-Distance.html","id":"independence","dir":"Articles","previous_headings":"","what":"Independence","title":"About the quartet distance","text":"One possible criticism quartet distance individual quartet statements independent. example, quartet statements AB | CD AB | CE together imply AB | DE. simple count identical quartets therefore includes redundant information. prevents straightforward information theoretic interpretation quartet distance.","code":""},{"path":"/articles/Quartet-Distance.html","id":"minimum-quartet-similarity","dir":"Articles","previous_headings":"","what":"Minimum quartet similarity","title":"About the quartet distance","text":"related phenomenon, six tips bifurcating tree, quartets necessarily shared trees. Consider tree:  trees quartets common Tree symmetric  Now create Tree C adding 6th tip sister tip 3 Tree .  ’s nowhere add tip 6 Tree B without creating quartet exists Tree C.  , minimum possible quartet similarity non-zero, becomes increasingly difficult compute number leaves rises. fact increases value comparing low quartet similarity scores expected similarity pair random trees (.e. 13\\frac{1}{3}), rather zero.","code":"tree_a <- ape::read.tree(text = \"((1, 2), (3, (4, 5)));\") tree_b <- ape::read.tree(text = \"((1, 5), (3, (2, 4)));\") tree_c <- ape::read.tree(text=\"((1, 2), ((3, 6), (4, 5)));\")"},{"path":[]},{"path":"/articles/Using-Quartet.html","id":"loading-trees","dir":"Articles","previous_headings":"","what":"Loading trees","title":"Getting started with Quartet","text":"Instructions loading phylogenetic trees R can found separate vignette. examples, ’ll enter two simple trees hand:","code":"tree1 <- ape::read.tree(text = '(A, ((B, (C, (D, E))), ((F, G), (H, I))));') tree2 <- ape::read.tree(text = '(A, ((B, (C, (D, (H, I)))), ((F, G), E)));')"},{"path":"/articles/Using-Quartet.html","id":"calculating-distances","dir":"Articles","previous_headings":"","what":"Calculating distances","title":"Getting started with Quartet","text":"can calculate distances pairs trees using ‘Quartet’ package. First ’ll install package. can either install stable version CRAN repository: development version, GitHub – contain latest features may extensively tested: ’ll load package R’s working environment: Now package’s functions available within R. Let’s proceed calculate tree distances.","code":"install.packages('Quartet') devtools::install_github('ms609/Quartet') library('Quartet')"},{"path":"/articles/Using-Quartet.html","id":"pairs-of-trees","dir":"Articles","previous_headings":"Calculating distances","what":"Pairs of trees","title":"Getting started with Quartet","text":"Calculating distance two trees two stage process. quartet distance, first calculate status quartet: convert counts distance metric (similarity measure) suits needs – perhaps Quartet Divergence: can calculate similarity metrics using: can instructive visualize split tree contributing quartet similarity:  Rather using quartets, might want use partitions basis comparison:","code":"statuses <- QuartetStatus(tree1, tree2) QuartetDivergence(statuses, similarity = FALSE) ## [1] 0.6031746 SimilarityMetrics(statuses, similarity = TRUE) ##      DoNotConflict ExplicitlyAgree StrictJointAssertions ## [1,]     0.3968254       0.3968254             0.3968254 ##      SemiStrictJointAssertions SymmetricDifference MarczewskiSteinhaus ## [1,]                 0.3968254           0.3968254           0.2475248 ##      SteelPenny QuartetDivergence SimilarityToReference ## [1,]  0.3968254         0.3968254             0.3968254 VisualizeQuartets(tree1, tree2) SimilarityMetrics(SplitStatus(tree1, tree2)) ##      DoNotConflict ExplicitlyAgree StrictJointAssertions ## [1,]     0.3333333       0.3333333             0.3333333 ##      SemiStrictJointAssertions SymmetricDifference MarczewskiSteinhaus ## [1,]                 0.3333333           0.3333333                 0.2 ##      SteelPenny QuartetDivergence SimilarityToReference ## [1,]  0.3333333         0.3333333             0.3333333"},{"path":"/articles/Using-Quartet.html","id":"multiple-comparisons","dir":"Articles","previous_headings":"Calculating distances","what":"Multiple comparisons","title":"Getting started with Quartet","text":"two trees compare, can send list trees (class: list multiPhylo) distance comparison function. can calculate similarity one tree forest trees: one tree () trees forest: pair trees forest: one list trees second:","code":"library('TreeTools', quietly = TRUE, warn.conflicts = FALSE) oneTree <- CollapseNode(as.phylo(0, 11), 14) twoTrees <- structure(list(bal = BalancedTree(11), pec = PectinateTree(11)),                       class = 'multiPhylo')  status <- SharedQuartetStatus(twoTrees, cf = oneTree) QuartetDivergence(status) ##       bal       pec  ## 0.4939394 0.6272727 forest <- as.phylo(0:5, 11) names(forest) <- letters[1:6] status <- SharedQuartetStatus(forest) QuartetDivergence(status) ##         a         b         c         d         e         f  ## 1.0000000 0.9757576 0.9757576 0.9333333 0.9121212 0.9333333 status <- ManyToManyQuartetAgreement(forest) QuartetDivergence(status, similarity = FALSE) ##            a          b          c          d          e          f ## a 0.00000000 0.02424242 0.02424242 0.06666667 0.08787879 0.06666667 ## b 0.02424242 0.00000000 0.02424242 0.08787879 0.06666667 0.06666667 ## c 0.02424242 0.02424242 0.00000000 0.08484848 0.08484848 0.04242424 ## d 0.06666667 0.08787879 0.08484848 0.00000000 0.04242424 0.04242424 ## e 0.08787879 0.06666667 0.08484848 0.04242424 0.00000000 0.04242424 ## f 0.06666667 0.06666667 0.04242424 0.04242424 0.04242424 0.00000000 status <- TwoListQuartetAgreement(forest[1:4], forest[5:6]) QuartetDivergence(status, similarity = FALSE) ##            e          f ## a 0.08787879 0.06666667 ## b 0.06666667 0.06666667 ## c 0.08484848 0.04242424 ## d 0.04242424 0.04242424"},{"path":"/articles/Using-Quartet.html","id":"trees-with-different-tip-labels","dir":"Articles","previous_headings":"","what":"Trees with different tip labels","title":"Getting started with Quartet","text":"“Quartet” can compare trees different sizes non-identical sets taxa. Quartets pertaining leaf occur one tree treated unresolved.","code":"treeAG <- PectinateTree(letters[1:7]) treeBI <- PectinateTree(letters[2:9]) treeEJ <- PectinateTree(letters[5:10]) par(mfrow = c(1, 3), mar = rep(0.3, 4), cex = 1) plot(treeAG); plot(treeBI); plot(treeEJ) QuartetState(letters[1:4], treeAG) # 3: C is closest to D ## [1] 3 QuartetState(letters[1:4], treeBI) # 0: unresolved in this tree ## [1] 0 # Calculate status for all leaves observed in trees: here, A..I QuartetStatus(treeAG, treeBI, nTip = TRUE) ##        N   Q  s d r1 r2  u ## [1,] 252 126 15 0 20 55 36 # Calculate status for specified number of leaves # Here, we have ten taxa A..J, but J does not occur in either of these trees QuartetStatus(treeAG, treeBI, nTip = 10) ##        N   Q  s d r1 r2   u ## [1,] 420 210 15 0 20 55 120 # Compare a list of trees with different numbers of leaves to a reference QuartetStatus(c(treeAG, treeBI, treeEJ), cf = treeAG, nTip = TRUE) ##        N   Q  s d r1 r2   u ## [1,] 420 210 35 0  0  0 175 ## [2,] 420 210 15 0 55 20 120 ## [3,] 420 210  0 0 15 35 160 # Compare all pairs of trees in a list. # \"u\" shows how many possible quartets are unresolved in both trees ManyToManyQuartetAgreement(c(treeAG, treeBI, treeEJ), nTip = TRUE)[, , \"u\"] ##      [,1] [,2] [,3] ## [1,]  175  120  160 ## [2,]  120  140  130 ## [3,]  160  130  195"},{"path":"/articles/Using-Quartet.html","id":"other-calculations","dir":"Articles","previous_headings":"","what":"Other calculations","title":"Getting started with Quartet","text":"calculate many quartets unique certain tree (akin partitionwise equivalent ape::prop.clades), use: status['x_only'] = 23 quartets resolved certain way interestingTree, resolved way referenceTrees.","code":"interestingTree <- as.phylo(42, 7) referenceTrees <- list(BalancedTree(7), PectinateTree(7)) status <- CompareQuartetsMulti(interestingTree, referenceTrees)"},{"path":"/articles/Using-Quartet.html","id":"what-next","dir":"Articles","previous_headings":"","what":"What next?","title":"Getting started with Quartet","text":"may wish : Read Quartet distances Review alternative distance measures corresponding functions Interpret contextualize tree distance metrics","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin R. Smith. Author, maintainer, copyright holder. Andreas Sand. Bibliographic antecedent. Gerth Stølting Brodal. Bibliographic antecedent. Rolf Fagerberg. Bibliographic antecedent. Thomas Mailund. Bibliographic antecedent. Christian N. S. Pedersen. Bibliographic antecedent. Jens Johansen. Bibliographic antecedent. Morten K. Holt. Bibliographic antecedent.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Smith, MR (2019a). Quartet: comparison phylogenetic trees using quartet split measures. R package version 1.2.7. doi:10.5281/zenodo.2536318 Sand et al. (2014). tqDist: library computing quartet triplet distances binary general trees. Bioinformatics 30(14): 2079-2080. doi:10.1093/bioinformatics/btu157 Smith, MR (2019b). Bayesian parsimony approaches reconstruct informative trees simulated morphological datasets. Biology Letters 15:20180632. doi:10.1098/rsbl.2018.0632","code":"@Manual{Quartet,   title = {Quartet: comparison of phylogenetic trees using quartet and split measures},   author = {Martin R. Smith},   note = {R package version 1.2.7},   year = {2019},   doi = {10.5281/zenodo.2536318}, } @Article{Sand2014,   author = {Andreas Sand and Morten K. Holt and Jens Johansen and Gerth S. Brodal and Thomas Mailund and Christian N. S. Pedersen},   doi = {10.1093/bioinformatics/btu157},   journal = {Bioinformatics},   number = {14},   pages = {2079--2080},   title = {tqDist: a library for computing the quartet and triplet distances between binary or general trees},   volume = {30},   year = {2014}, } @Article{Smith2019,   author = {Martin R. Smith},   doi = {10.1098/rsbl.2018.0632},   journal = {Biology Letters},   title = {Bayesian and parsimony approaches reconstruct informative trees from simulated morphological datasets},   volume = {15},   number = {2},   pages = {20180632},   year = {2019}, }"},{"path":"/index.html","id":"quartet","dir":"","previous_headings":"","what":"Comparison of Phylogenetic Trees Using Quartet and Split Measures","title":"Comparison of Phylogenetic Trees Using Quartet and Split Measures","text":"‘Quartet’ R package calculates quartet distance two trees (Estabrook et al. 1985), measure similarity based number shared four-taxon subtrees. quartet distance outperforms number widely used tree distances (e.g. Robinson–Foulds, path, rearrangement distances) number theoretical practical measures (Steel & Penny 1993; Smith 2020), particularly valuable construction tree spaces (Smith 2021). ‘Quartet’ uses ‘tqDist’ algorithm (Brodal et al. 2004; Sand et al. 2014). Unlike many implementations, distinguishes quartets contradicted one tree, quartets simply absent due lack resolution (.e. presence polytomies; see Smith 2019). ‘Quartet’ makes distinction quartet metric (function QuartetStatus()) partition metric (.e. Robinson-Foulds distance; function SplitStatus()).","code":""},{"path":"/index.html","id":"using-the-package","dir":"","previous_headings":"","what":"Using the package","title":"Comparison of Phylogenetic Trees Using Quartet and Split Measures","text":"Install load library CRAN follows: latest features, install development version: need Rtools installed order build development version source. View function reference basic usage instructions.","code":"install.packages('Quartet') library('Quartet') if(!require(\"curl\")) install.packages(\"curl\") if(!require(\"remotes\")) install.packages(\"remotes\") remotes::install_github(\"ms609/Quartet\")"},{"path":"/index.html","id":"known-limitations","dir":"","previous_headings":"","what":"Known limitations","title":"Comparison of Phylogenetic Trees Using Quartet and Split Measures","text":"Quartet supports trees 477 leaves. Larger trees contain quartets can represented R’s signed 32-bit integers. underlying ‘tqDist’ library may handle trees 568 leaves, 64-bit integer representations increase number . Making either improvements within R package require substantial additional work, implemented – file issue useful .","code":""},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Comparison of Phylogenetic Trees Using Quartet and Split Measures","text":"Brodal G.S., Fagerberg R., Pedersen C.N.S. 2004. Computing quartet distance evolutionary trees time O(n log n). Algorithmica 38:377–395. Estabrook G.F., McMorris F.R., Meacham C.. 1985. Comparison undirected phylogenetic trees based subtrees four evolutionary units. Syst. Zool. 34:193–200. Sand ., Holt M.K., Johansen J., Brodal G.S., Mailund T., Pedersen C.N.S. 2014. tqDist: library computing quartet triplet distances binary general trees. Bioinformatics 30:2079–2080. https://doi.org/10.1093/bioinformatics/btu157 Smith, M.R. 2019. Bayesian parsimony approaches reconstruct informative trees simulated morphological datasets. Biol. Lett. 15:20180632. https://doi.org/10.1098/rsbl.2018.0632 Smith, M.R. 2020. Information theoretic generalized Robinson–Foulds metrics comparing phylogenetic trees. Bioinformatics, 36:5007–5013. https://dx.doi.org/10.1093/bioinformatics/btaa614 Smith, M.R. 2022. Robust analysis phylogenetic tree space. Systematic Biology, syab100. https://dx.doi.org/10.1093/sysbio/syab100 Steel, M. Penny, D. 1993. Distributions tree comparison metrics: new results. Syst. Biol. 42: 126-141. https://doi.org/10.1093/sysbio/42.2.126 Please note ‘Quartet’ project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/reference/AllQuartets.html","id":null,"dir":"Reference","previous_headings":"","what":"List all quartets — AllQuartets","title":"List all quartets — AllQuartets","text":"Lists choices four taxa tree. computationally efficient alternative combn.","code":""},{"path":"/reference/AllQuartets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List all quartets — AllQuartets","text":"","code":"AllQuartets(nTips)  # S3 method for class 'numeric' AllQuartets(nTips)  # S3 method for class 'phylo' AllQuartets(nTips)"},{"path":"/reference/AllQuartets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List all quartets — AllQuartets","text":"nTips Integer, specifying number tips tree; tree, whose tips counted.","code":""},{"path":"/reference/AllQuartets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List all quartets — AllQuartets","text":"AllQuartets() returns matrix four rows choose(n_tips, 4) columns, column corresponding unique selection four different integers less equal nTips.","code":""},{"path":[]},{"path":"/reference/AllQuartets.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"List all quartets — AllQuartets","text":"Martin R. Smith (martin.smith@durham.ac.uk)","code":""},{"path":"/reference/AllQuartets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List all quartets — AllQuartets","text":"","code":"AllQuartets(5) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    1    1    1    2 #> [2,]    2    2    2    3    3 #> [3,]    3    3    4    4    4 #> [4,]    4    5    5    5    5   combn(5, 4) # Provides the same information, but for large  #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    1    1    1    2 #> [2,]    2    2    2    3    3 #> [3,]    3    3    4    4    4 #> [4,]    4    5    5    5    5             # values of n_tips is significantly slower."},{"path":"/reference/CompareQuartets.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare quartet states by explicit enumeration — CompareQuartets","title":"Compare quartet states by explicit enumeration — CompareQuartets","text":"CompareQuartets() uses explicit enumeration compare two lists quartet states  Estabrook1985Quartet, detailing many identical many unresolved. purposes, faster function QuartetStatus() preferable.","code":""},{"path":"/reference/CompareQuartets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare quartet states by explicit enumeration — CompareQuartets","text":"","code":"CompareQuartets(x, cf)"},{"path":"/reference/CompareQuartets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare quartet states by explicit enumeration — CompareQuartets","text":"x, cf List quartet states, perhaps generated QuartetStates().","code":""},{"path":"/reference/CompareQuartets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare quartet states by explicit enumeration — CompareQuartets","text":"Returns array seven numeric elements, corresponding N total number quartet statements two trees n leaves, .e. 2 Q. Q total number quartets n leaves. s number quartets resolved identically trees. d number quartets resolved differently tree. r1 number quartets resolved tree 1, tree 2. r2 number quartets resolved tree 2, tree 1. u number quartets unresolved trees.","code":""},{"path":[]},{"path":[]},{"path":"/reference/CompareQuartets.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compare quartet states by explicit enumeration — CompareQuartets","text":"Martin R. Smith (martin.smith@durham.ac.uk)","code":""},{"path":"/reference/CompareQuartets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare quartet states by explicit enumeration — CompareQuartets","text":"","code":"trees <- list(TreeTools::BalancedTree(6),                 TreeTools::PectinateTree(6))   quartets <- QuartetStates(trees)   CompareQuartets(quartets[[1]], quartets[[2]]) #>  N  Q  s  d r1 r2  u  #>  2  1  1  0  0  0  0"},{"path":"/reference/CompareQuartetsMulti.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare one tree's quartets against others' — CompareQuartetsMulti","title":"Compare one tree's quartets against others' — CompareQuartetsMulti","text":"CompareQuartetsMulti() counts many quartets one tree resolved way different ways forest comparison trees.","code":""},{"path":"/reference/CompareQuartetsMulti.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare one tree's quartets against others' — CompareQuartetsMulti","text":"","code":"CompareQuartetsMulti(x, cf)"},{"path":"/reference/CompareQuartetsMulti.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare one tree's quartets against others' — CompareQuartetsMulti","text":"x Object class phylo representing tree interest. cf Comparison tree class phylo, list thereof, leaves x.","code":""},{"path":"/reference/CompareQuartetsMulti.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare one tree's quartets against others' — CompareQuartetsMulti","text":"CompareQuartetsMulti() returns named integer vector specifying number quartets whose resolution x matches resolutions cf. Named elements : N total number quartet statements given number n-leaf trees, .e. n_trees × Q. Q total number quartets n leaves. s_all number quartets resolved identically trees. s_any number quartets resolved x, identically least one cf. d_all number quartets resolved every tree cf, never way resolved x. d_any number quartets x resolved differently (.e. contradicted) least one tree cf. r1_all number quartets resolved x, cf. r1_any number quartets resolved x, unresolved least one cf. r2_all number quartets resolved cf, x. r2_any number quartets resolved least one cf, x. u_all number quartets unresolved trees. u_any number quartets unresolved x least one tree cf. x_only number quartets x resolved way cf.","code":""},{"path":"/reference/CompareQuartetsMulti.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare one tree's quartets against others' — CompareQuartetsMulti","text":"CompareQuartetsMulti() explicitly evaluates quartet tree. runtime increase hyper-exponentially number leaves trees compared.  30 leaves take around 5 seconds; 40 closer 20 s, 50 around minute.","code":""},{"path":[]},{"path":"/reference/CompareQuartetsMulti.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compare one tree's quartets against others' — CompareQuartetsMulti","text":"Martin R. Smith (martin.smith@durham.ac.uk)","code":""},{"path":"/reference/CompareQuartetsMulti.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare one tree's quartets against others' — CompareQuartetsMulti","text":"","code":"library(\"TreeTools\") CompareQuartetsMulti(x  = CollapseNode(as.phylo(42, 6), 8:9),                      cf = list(BalancedTree(6), PectinateTree(6),                                 CollapseNode(as.phylo(1337, 6), 9:10))) #>      N      Q  s_all  s_any  d_all  d_any r1_all r1_any r2_all r2_any  u_all  #>     60     15      0      4      4      9      0      7      1      3      0  #>  u_any x_only  #>      2      8"},{"path":"/reference/CompareSplits.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare status of splits — CompareSplits","title":"Compare status of splits — CompareSplits","text":"Reports whether splits present contradicted set reference splits.","code":""},{"path":"/reference/CompareSplits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare status of splits — CompareSplits","text":"","code":"CompareSplits(splits, splits2)  CompareBipartitions(splits, splits2)"},{"path":"/reference/CompareSplits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare status of splits — CompareSplits","text":"splits object can coerced class Splits using .Splits. splits2 Splits compare splits.","code":""},{"path":"/reference/CompareSplits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare status of splits — CompareSplits","text":"named vector eight integers, listing number unique splits : N    exist total; .e. number splits splits1 plus number splits2, equivalent 2 s + d1 + d2 + r1 + r2; P1   occur splits1 P2   occur splits2 s    occur splits1 splits2; d1   occur splits1 contradicted splits2; d2   occur splits2 contradicted splits1; r1   occur splits1 , neither present contradicted splits2; r2   occur splits2 , neither present contradicted splits1; RF   occur one tree ; .e. d1 + d2 + r1 + r2, Robinson-Foulds distance.","code":""},{"path":"/reference/CompareSplits.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compare status of splits — CompareSplits","text":"Estabrook1985Quartet Robinson1981Quartet","code":""},{"path":[]},{"path":"/reference/CompareSplits.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compare status of splits — CompareSplits","text":"Martin R. Smith (martin.smith@durham.ac.uk)","code":""},{"path":"/reference/CompareSplits.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare status of splits — CompareSplits","text":"","code":"splits1 <- TreeTools::BalancedTree(8) splits2 <- TreeTools::PectinateTree(8)  CompareSplits(splits1, splits2) #>  N P1 P2  s d1 d2 r1 r2  #> 10  5  5  3  2  2  0  0"},{"path":"/reference/Distances.html","id":null,"dir":"Reference","previous_headings":"","what":"Direct entry points to ","title":"Direct entry points to ","text":"Wrappers functions \"tqDist\", calculate triplet quartet distances pairs trees.","code":""},{"path":"/reference/Distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Direct entry points to ","text":"","code":"QuartetDistance(file1, file2)  QuartetAgreement(file1, file2)  PairsQuartetDistance(file1, file2)  OneToManyQuartetAgreement(file1, file2)  AllPairsQuartetDistance(file)  AllPairsQuartetAgreement(file)  TripletDistance(file1, file2)  PairsTripletDistance(file1, file2)  AllPairsTripletDistance(file)"},{"path":"/reference/Distances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Direct entry points to ","text":"file, file1, file2 Paths files containing tree trees Newick format, possibly created using TQFile().","code":""},{"path":"/reference/Distances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Direct entry points to ","text":"...Distance() functions return distance requested trees. ...Agreement() functions return number triplets quartets : , resolved fashion trees; E, unresolved trees. Comparing tree yields totals (+B+C) (D+E) referred Brodal2013;textualQuartet Holt2014;textualQuartet.","code":""},{"path":"/reference/Distances.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Direct entry points to ","text":"QuartetDistance(): Returns quartet distance tree. file1 tree file2. QuartetAgreement(): Returns vector length two, listing [1] number resolved quartets agree (); [2] number quartets unresolved trees (E). See Brodal2013;textualQuartet. PairsQuartetDistance(): Quartet distance tree line file1 tree corresponding line file2. OneToManyQuartetAgreement(): Quartet distance tree file1 tree line file2. AllPairsQuartetDistance(): Quartet distance tree listed file tree therein. AllPairsQuartetAgreement(): Quartet status pair trees file. TripletDistance(): Triplet distance single tree given file. PairsTripletDistance(): Triplet distance tree line file1 tree corresponding line file2. AllPairsTripletDistance(): Triplet distance tree listed file tree therein.","code":""},{"path":[]},{"path":[]},{"path":"/reference/Distances.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Direct entry points to ","text":"Algorithms: Brodal2013;textualQuartet; Holt2014;textualQuartet. C implementation: Sand2014;textualQuartet; modified portability Martin R. Smith. R interface: Martin R. Smith.","code":""},{"path":"/reference/PairSharedQuartetStatus.html","id":null,"dir":"Reference","previous_headings":"","what":"Status of quartets that exist in two trees — PairSharedQuartetStatus","title":"Status of quartets that exist in two trees — PairSharedQuartetStatus","text":"Removes tips occur tree1 tree2, calculates status remaining quartets.","code":""},{"path":"/reference/PairSharedQuartetStatus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Status of quartets that exist in two trees — PairSharedQuartetStatus","text":"","code":"PairSharedQuartetStatus(tree1, tree2)"},{"path":"/reference/PairSharedQuartetStatus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Status of quartets that exist in two trees — PairSharedQuartetStatus","text":"tree1, tree2 Trees class phylo compare.","code":""},{"path":"/reference/PairSharedQuartetStatus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Status of quartets that exist in two trees — PairSharedQuartetStatus","text":"Returns named array six integers corresponding quantities Estabrook et al. (1985): N total number quartet statements two trees n leaves, .e. 2 Q. Q total number quartets n leaves. s number quartets resolved identically trees. d number quartets resolved differently tree. r1 number quartets resolved tree 1, tree 2. r2 number quartets resolved tree 2, tree 1. u number quartets unresolved trees.","code":""},{"path":[]},{"path":"/reference/PairSharedQuartetStatus.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Status of quartets that exist in two trees — PairSharedQuartetStatus","text":"Martin R. Smith (martin.smith@durham.ac.uk)","code":""},{"path":"/reference/PairSharedSplitStatus.html","id":null,"dir":"Reference","previous_headings":"","what":"Pair shared split status — PairSharedSplitStatus","title":"Pair shared split status — PairSharedSplitStatus","text":"Removes tips occur ref cf, calculates status remaining splits.","code":""},{"path":"/reference/PairSharedSplitStatus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pair shared split status — PairSharedSplitStatus","text":"","code":"PairSharedSplitStatus(ref, cf)"},{"path":"/reference/PairSharedSplitStatus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pair shared split status — PairSharedSplitStatus","text":"ref, cf Trees class phylo compare.","code":""},{"path":"/reference/PairSharedSplitStatus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pair shared split status — PairSharedSplitStatus","text":"Named integer length 6, per CompareSplits()","code":""},{"path":"/reference/PairSharedSplitStatus.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Pair shared split status — PairSharedSplitStatus","text":"Martin R. Smith (martin.smith@durham.ac.uk)","code":""},{"path":"/reference/PairSharedSplitStatus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pair shared split status — PairSharedSplitStatus","text":"","code":"library(\"TreeTools\") ref <- BalancedTree(letters[1:9]) cf <- BalancedTree(letters[3:13])  PairSharedSplitStatus(ref, cf) #>  N P1 P2  s d1 d2 r1 r2  #>  8  4  4  2  2  2  0  0"},{"path":"/reference/PlotQuartet.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot quartet on tree topologies — PlotQuartet","title":"Plot quartet on tree topologies — PlotQuartet","text":"Draws tree, highlighting members specified quartet colour.","code":""},{"path":"/reference/PlotQuartet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot quartet on tree topologies — PlotQuartet","text":"","code":"PlotQuartet(tree, quartet, overwritePar = TRUE, caption = TRUE, ...)"},{"path":"/reference/PlotQuartet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot quartet on tree topologies — PlotQuartet","text":"tree tree class phylo, list trees.  first member tree considered \"reference\" tree. quartet vector four integers, corresponding numbered leaves tree; character vector specifying labels four leaves. overwritePar Logical specifying whether use existing mfrow mar parameters par() (FALSE), plot trees side--side new graphical device (TRUE). caption Logical specifying whether annotate plot specify whether quartet selected different state reference tree. ... Additional parameters send plot().","code":""},{"path":"/reference/PlotQuartet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot quartet on tree topologies — PlotQuartet","text":"PlotQuartet() returns invisible(), plotted tree first two members quartet highlighted orange, second two highlighted blue.","code":""},{"path":"/reference/PlotQuartet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot quartet on tree topologies — PlotQuartet","text":"Martin R. Smith (martin.smith@durham.ac.uk)","code":""},{"path":"/reference/PlotQuartet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot quartet on tree topologies — PlotQuartet","text":"","code":"data(\"sq_trees\")  oPar <- par(mfrow = c(3, 6), mar = rep(0.5, 4)) PlotQuartet(sq_trees, c(2, 5, 3, 8), overwritePar = FALSE)  par(oPar)"},{"path":"/reference/Quartet-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Quartet — Quartet-package","title":"Quartet — Quartet-package","text":"'Quartet' R package calculates quartet distance two trees (Estabrook et al. 1985), measure similarity based number shared four-taxon subtrees.","code":""},{"path":"/reference/Quartet-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quartet — Quartet-package","text":"quartet distance outperforms number widely used tree distances (e.g. Robinson–Foulds, path, rearrangement distances) number theoretical practical measures (Steel & Penny 1993; Smith 2020), particularly valuable construction tree spaces (Smith 2021). 'Quartet' uses 'tqDist' algorithm (Brodal et al. 2004; Sand et al. 2014). Unlike many implementations, distinguishes quartets contradicted one tree, quartets simply absent due lack resolution (.e. presence polytomies; see Smith 2019). 'Quartet' makes distinction quartet metric (function QuartetStatus()) partition metric (.e. Robinson-Foulds distance; function SplitStatus()).","code":""},{"path":"/reference/Quartet-package.html","id":"using-quartet","dir":"Reference","previous_headings":"","what":"Using Quartet","title":"Quartet — Quartet-package","text":"View function reference basic usage instructions.","code":""},{"path":"/reference/Quartet-package.html","id":"known-limitations","dir":"Reference","previous_headings":"","what":"Known limitations","title":"Quartet — Quartet-package","text":"Quartet supports trees 477 leaves.  Larger trees contain quartets can represented R's signed 32-bit integers. underlying 'tqDist' library may handle trees 568 leaves, 64-bit integer representations increase number . Making either improvements within R package require substantial additional work, implemented – file issue useful .","code":""},{"path":"/reference/Quartet-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Quartet — Quartet-package","text":"Brodal G.S., Fagerberg R., Pedersen C.N.S. 2004. Computing quartet distance evolutionary trees time O(n log n). Algorithmica. 38:377–395. Estabrook G.F., McMorris F.R., Meacham C.. 1985. Comparison undirected phylogenetic trees based subtrees four evolutionary units. Syst. Zool. 34:193–200. Sand ., Holt M.K., Johansen J., Brodal G.S., Mailund T., Pedersen C.N.S. 2014. tqDist: library computing quartet triplet distances binary general trees. Bioinformatics. 30:2079–2080. https://doi.org/10.1093/bioinformatics/btu157 Smith, M.R. 2019. Bayesian parsimony approaches reconstruct informative trees simulated morphological datasets. Biol. Lett. 15:20180632. https://doi.org/10.1098/rsbl.2018.0632 Smith, M.R. 2020. Information theoretic generalized Robinson–Foulds metrics comparing phylogenetic trees. Bioinformatics 36:5007–5013. https://dx.doi.org/10.1093/bioinformatics/btaa614/5866976 Smith, M.R. 2022. Robust analysis phylogenetic tree space. Syst. Biol. 71: 1255-1270. https://dx.doi.org/10.1093/sysbio/syab100 Steel, M. Penny, D. 1993. Distributions tree comparison metrics: new results. Syst. Biol. 42: 126-141. https://doi.org/10.1093/sysbio/42.2.126","code":""},{"path":[]},{"path":"/reference/Quartet-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Quartet — Quartet-package","text":"Maintainer: Martin R. Smith martin.smith@durham.ac.uk (ORCID) [copyright holder] contributors: Andreas Sand [bibliographic antecedent] Gerth Stølting Brodal [bibliographic antecedent] Rolf Fagerberg [bibliographic antecedent] Thomas Mailund [bibliographic antecedent] Christian N. S. Pedersen cstorm@birc.au.dk (ORCID) [bibliographic antecedent] Jens Johansen [bibliographic antecedent] Morten K. Holt [bibliographic antecedent]","code":""},{"path":"/reference/QuartetPoints.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot tree differences on ternary plots — QuartetPoints","title":"Plot tree differences on ternary plots — QuartetPoints","text":"Generate points depict tree difference (terms resolution accuracy) ternary plot, per Smith2019;textualQuartet.","code":""},{"path":"/reference/QuartetPoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot tree differences on ternary plots — QuartetPoints","text":"","code":"QuartetPoints(trees, cf = trees[[1]])  SplitPoints(trees, cf = trees[[1]])  BipartitionPoints(trees, cf = trees[[1]])"},{"path":"/reference/QuartetPoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot tree differences on ternary plots — QuartetPoints","text":"trees list trees class phylo, identically labelled tips. cf Comparison tree class phylo.  unspecified, tree compared first tree trees.","code":""},{"path":"/reference/QuartetPoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot tree differences on ternary plots — QuartetPoints","text":"data frame listing ternary coordinates trees, based amount information common comparison tree (defaults first member list, unspecified).","code":""},{"path":"/reference/QuartetPoints.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot tree differences on ternary plots — QuartetPoints","text":"ternary plot (produced using Ternary package, Ternary;nobracketsQuartet) depict number quartets splits : resolved reference tree (cf), neither present contradicted comparison tree (trees); resolved differently reference comparison tree; resolved manner reference comparison trees. reference tree (cf) taken represent best possible knowledge \"true\" topology, polytomies reference tree represent uncertainty. tree trees resolves relationships within polytomy, possible establish (based reference tree) whether resolution correct erroneous. , extra resolution trees neither corroborated contradicted cf ignored.","code":""},{"path":[]},{"path":"/reference/QuartetPoints.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot tree differences on ternary plots — QuartetPoints","text":"Martin R. Smith (martin.smith@durham.ac.uk)","code":""},{"path":"/reference/QuartetPoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot tree differences on ternary plots — QuartetPoints","text":"","code":"library(\"Ternary\") data(\"sq_trees\")  TernaryPlot(alab = \"Unresolved\", blab = \"Contradicted\", clab = \"Consistent\",             point = \"right\") TernaryLines(list(c(0, 2/3, 1/3), c(1, 0, 0)), col = \"red\", lty = \"dotted\") TernaryText(QuartetPoints(sq_trees, cf = sq_trees$collapse_one), 1:15,              col = Ternary::cbPalette8[2], cex = 0.8) TernaryText(SplitPoints(sq_trees, cf = sq_trees$collapse_one), 1:15,              col = Ternary::cbPalette8[3], cex = 0.8) legend(\"bottomright\", c(\"Quartets\", \"Splits\"), bty = \"n\", pch = 1, cex = 0.8,        col = Ternary::cbPalette8[2:3])"},{"path":"/reference/QuartetState.html","id":null,"dir":"Reference","previous_headings":"","what":"Quartet State(s) — QuartetState","title":"Quartet State(s) — QuartetState","text":"Report status specified quartet(s) given trees lists splits Estabrook1985Quartet.","code":""},{"path":"/reference/QuartetState.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quartet State(s) — QuartetState","text":"","code":"QuartetState(tips, bips, splits = bips, asRaw = FALSE)  QuartetStates(splits, asRaw = FALSE)  # S3 method for class 'Splits' QuartetStates(splits, asRaw = FALSE)  # S3 method for class 'list' QuartetStates(splits, asRaw = FALSE)  # S3 method for class 'multiPhylo' QuartetStates(splits, asRaw = FALSE)"},{"path":"/reference/QuartetState.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quartet State(s) — QuartetState","text":"tips four-element array listing quartet leaves, either number (class numeric) name (class character). bips Deprecated; included compatibility v1.0.2 . splits object, tree class phylo, can induced Splits object using .Splits. asRaw Logical specifying whether return format raw, uses less memory can processed faster integer type. Default currently set FALSE backwards compatibility; suggest overriding TRUE.","code":""},{"path":"/reference/QuartetState.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quartet State(s) — QuartetState","text":"QuartetState() returns 0 relationships four leaves constrained provided splits, index closest relative tips[4], otherwise. QuartetStates() returns raw vector listing status quartet leaves (order listed AllQuartets()) turn, multiple trees provided, matrix row corresponds vector.","code":""},{"path":"/reference/QuartetState.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quartet State(s) — QuartetState","text":"One three possible four-leaf trees consistent set splits generated fully resolved tree.  leaves numbered 1 4, tree can identified naming leaf closely related leaf 4. set splits generated tree contains polytomies, possible three four-leaf trees consistent set splits.","code":""},{"path":[]},{"path":[]},{"path":"/reference/QuartetState.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Quartet State(s) — QuartetState","text":"Martin R. Smith (martin.smith@durham.ac.uk)","code":""},{"path":"/reference/QuartetState.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quartet State(s) — QuartetState","text":"","code":"trees <- list(TreeTools::BalancedTree(6),               TreeTools::PectinateTree(6))  trees[[3]] <- TreeTools::CollapseNode(trees[[2]], 9:10)  QuartetState(c(1, 3, 4, 6), trees[[2]])   #> [1] 3 QuartetState(1:4, trees[[1]]) == QuartetState(1:4, trees[[2]]) #> [1] TRUE QuartetState(c(1, 3, 4, 6), trees[[3]])   #> [1] 0  QuartetStates(trees[[2]]) #>  [1] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 QuartetStates(trees[[3]]) #>  [1] 0 0 0 0 0 3 0 0 3 3 0 0 3 3 3  CompareQuartets(QuartetStates(trees[[2]]), QuartetStates(trees[[3]])) #>  N  Q  s  d r1 r2  u  #> 30 15  6  0  9  0  0  CompareQuartetsMulti(trees[[1]], trees[2:3]) #>      N      Q  s_all  s_any  d_all  d_any r1_all r1_any r2_all r2_any  u_all  #>     45     15      3     12      3      3      0      9      0      0      0  #>  u_any x_only  #>      0      3"},{"path":"/reference/QuartetStatus.html","id":null,"dir":"Reference","previous_headings":"","what":"Status of quartets — SharedQuartetStatus","title":"Status of quartets — SharedQuartetStatus","text":"Determines number quartets consistent within pairs trees.","code":""},{"path":"/reference/QuartetStatus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Status of quartets — SharedQuartetStatus","text":"","code":"SharedQuartetStatus(trees, cf = trees[[1]])  QuartetStatus(trees, cf = trees[[1]], nTip = NULL)  ManyToManyQuartetAgreement(trees, nTip = NULL)  TwoListQuartetAgreement(trees1, trees2)  SingleTreeQuartetAgreement(trees, comparison)"},{"path":"/reference/QuartetStatus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Status of quartets — SharedQuartetStatus","text":"trees list trees class phylo, identically labelled tips. cf Comparison tree class phylo.  unspecified, tree compared first tree trees. nTip Integer specifying number tips occurred trees.  Useful comparing trees different data sources contain non-overlapping tips. NULL, default, trees assumed contain tips. TRUE, vector generated automatically counting unique tip labels found trees cf. trees1, trees2 List multiPhylo objects containing trees class phylo. comparison tree class phylo compare trees.","code":""},{"path":"/reference/QuartetStatus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Status of quartets — SharedQuartetStatus","text":"QuartetStatus() returns two dimensional array. Rows correspond input trees; first row report perfect match first tree specified comparison tree (cf specified).  Columns list status quartet: N total number quartet statements two trees n leaves, .e. 2 Q. Q total number quartets n leaves. s number quartets resolved identically trees. d number quartets resolved differently tree. r1 number quartets resolved tree 1, tree 2. r2 number quartets resolved tree 2, tree 1. u number quartets unresolved trees. ManyToManyQuartetAgreement() returns three-dimensional array listing, pair trees turn, number quartets category. TwoListQuartetAgreement() returns three-dimensional array listing, pair trees turn, number quartets category. SingleTreeQuartetAgreement() returns two-dimensional array listing, tree trees, total number quartets number quartets category. comparison tree treated tree2.","code":""},{"path":"/reference/QuartetStatus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Status of quartets — SharedQuartetStatus","text":"Given list trees, returns number quartet statements Estabrook1985Quartet present reference tree (first entry trees, cf specified) also present tree.  random pair fully resolved trees expected share choose(n_tip, 4) / 3 quartets. trees bear number tips, SharedQuartetStatus() consider quartets include taxa common trees. information possible calculate many possible quartets occur one tree , though yet function calculating ; let us know appreciate functionality. status quartet calculated using algorithms Brodal2013;textualQuartet Holt2014;textualQuartet, implemented tqdist C library Sand2014Quartet.","code":""},{"path":"/reference/QuartetStatus.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Status of quartets — SharedQuartetStatus","text":"SharedQuartetStatus(): Reports split statistics obtained removing tips occur trees compared. ManyToManyQuartetAgreement(): Agreement quartet, comparing pair trees list. TwoListQuartetAgreement(): Agreement quartet trees one list quartet trees second list. SingleTreeQuartetAgreement(): Agreement quartet trees list quartets comparison tree.","code":""},{"path":[]},{"path":[]},{"path":"/reference/QuartetStatus.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Status of quartets — SharedQuartetStatus","text":"Martin R. Smith (martin.smith@durham.ac.uk)","code":""},{"path":"/reference/QuartetStatus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Status of quartets — SharedQuartetStatus","text":"","code":"data(\"sq_trees\") # Calculate the status of each quartet relative to the first entry in  # sq_trees sq_status <- QuartetStatus(sq_trees)  # Calculate the status of each quartet relative to a given tree two_moved <- sq_trees[5:7] sq_status <- QuartetStatus(two_moved, sq_trees$ref_tree)  # Calculate Estabrook et al's similarity measures: SimilarityMetrics(sq_status) #>               DoNotConflict ExplicitlyAgree StrictJointAssertions #> move_two_near     0.9272727       0.9272727             0.9272727 #> move_two_mid      0.7636364       0.7636364             0.7636364 #> move_two_far      0.7212121       0.7212121             0.7212121 #>               SemiStrictJointAssertions SymmetricDifference MarczewskiSteinhaus #> move_two_near                 0.9272727           0.9272727           0.8644068 #> move_two_mid                  0.7636364           0.7636364           0.6176471 #> move_two_far                  0.7212121           0.7212121           0.5639810 #>               SteelPenny QuartetDivergence SimilarityToReference #> move_two_near  0.9272727         0.9272727             0.9272727 #> move_two_mid   0.7636364         0.7636364             0.7636364 #> move_two_far   0.7212121         0.7212121             0.7212121  # Compare trees that include a subset of the taxa 1..10 library(\"TreeTools\", quietly = TRUE, warn.conflict = FALSE) QuartetStatus(BalancedTree(1:5), BalancedTree(3:8), nTip = 10) #>        N   Q s d r1 r2   u #> [1,] 420 210 0 0  5 15 190  # If all taxa studied occur in `trees` or `cf`, set `nTip = TRUE` QuartetStatus(BalancedTree(1:5), BalancedTree(3:10), nTip = TRUE) #>        N   Q s d r1 r2   u #> [1,] 420 210 0 0  5 70 135   # Calculate Quartet Divergence between each tree and each other tree in a  # list QuartetDivergence(ManyToManyQuartetAgreement(two_moved)) #>               move_two_near move_two_mid move_two_far #> move_two_near     1.0000000    0.6909091    0.6484848 #> move_two_mid      0.6909091    1.0000000    0.6484848 #> move_two_far      0.6484848    0.6484848    1.0000000 # Calculate Quartet Divergence between each tree in one list and each  # tree in another QuartetDivergence(TwoListQuartetAgreement(sq_trees[1:3], sq_trees[10:13])) #>               m1mid_col1 m1mid_colsome m2mid_col1 m2mid_colsome #> ref_tree       0.8303030     0.7439394  0.7515152     0.6893939 #> move_one_near  0.8545455     0.7681818  0.7272727     0.6651515 #> move_one_mid   0.9878788     0.9015152  0.6060606     0.5621212"},{"path":"/reference/ResolvedQuartets.html","id":null,"dir":"Reference","previous_headings":"","what":"Count resolved quartets — ResolvedQuartets","title":"Count resolved quartets — ResolvedQuartets","text":"Counts many quartets resolved unresolved given tree, following Brodal2013;textualQuartet.","code":""},{"path":"/reference/ResolvedQuartets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count resolved quartets — ResolvedQuartets","text":"","code":"ResolvedQuartets(tree, countTriplets = FALSE)  ResolvedTriplets(tree)"},{"path":"/reference/ResolvedQuartets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count resolved quartets — ResolvedQuartets","text":"tree tree class phylo. countTriplets Logical; TRUE, function return number triplets instead number quartets.","code":""},{"path":"/reference/ResolvedQuartets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count resolved quartets — ResolvedQuartets","text":"ResolvedQuartets() returns vector length two, listing number quartets (triplets) [1] resolved; [2] unresolved specified tree.","code":""},{"path":"/reference/ResolvedQuartets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count resolved quartets — ResolvedQuartets","text":"Trees 477 leaves risk encountering integer overflow errors, number quartets larger can stored R's signed 32-bit integer representation.  warnings thrown, check subsequent calculations errors.","code":""},{"path":"/reference/ResolvedQuartets.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Count resolved quartets — ResolvedQuartets","text":"ResolvedTriplets(): Convenience function calculate number resolved/unresolved triplets.","code":""},{"path":[]},{"path":[]},{"path":"/reference/ResolvedQuartets.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Count resolved quartets — ResolvedQuartets","text":"Martin R. Smith (martin.smith@durham.ac.uk)","code":""},{"path":"/reference/ResolvedQuartets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count resolved quartets — ResolvedQuartets","text":"","code":"data(sq_trees)  ResolvedTriplets(sq_trees$collapse_some) #> [1] 144  21 # Equivalent to: ResolvedQuartets(sq_trees$collapse_some, countTriplets = TRUE) #> [1] 144  21  vapply(sq_trees, ResolvedQuartets, integer(2)) #>      ref_tree move_one_near move_one_mid move_one_far move_two_near #> [1,]      330           330          330          330           330 #> [2,]        0             0            0            0             0 #>      move_two_mid move_two_far collapse_one collapse_some m1mid_col1 #> [1,]          330          330          322           207        322 #> [2,]            0            0            8           123          8 #>      m1mid_colsome m2mid_col1 m2mid_colsome opposite_tree caterpillar #> [1,]           265        322           125           330         330 #> [2,]            65          8           205             0           0 #>      top_and_tail anti_pectinate random_tree #> [1,]          330            330         330 #> [2,]            0              0           0"},{"path":"/reference/SimilarityMetrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Tree similarity measures — SimilarityMetrics","title":"Tree similarity measures — SimilarityMetrics","text":"Measure tree similarity difference.","code":""},{"path":"/reference/SimilarityMetrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tree similarity measures — SimilarityMetrics","text":"","code":"SimilarityMetrics(elementStatus, similarity = TRUE)  DoNotConflict(elementStatus, similarity = TRUE)  ExplicitlyAgree(elementStatus, similarity = TRUE)  StrictJointAssertions(elementStatus, similarity = TRUE)  SemiStrictJointAssertions(elementStatus, similarity = TRUE)  SymmetricDifference(elementStatus, similarity = TRUE)  RawSymmetricDifference(elementStatus, similarity = FALSE)  RobinsonFoulds(elementStatus, similarity = FALSE)  MarczewskiSteinhaus(elementStatus, similarity = TRUE)  SteelPenny(elementStatus, similarity = TRUE)  QuartetDivergence(elementStatus, similarity = TRUE)  SimilarityToReference(elementStatus, similarity = TRUE, normalize = FALSE)"},{"path":"/reference/SimilarityMetrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tree similarity measures — SimilarityMetrics","text":"elementStatus Two-dimensional integer array, rows corresponding counts matching quartets partitions tree, columns named according output QuartetStatus() SplitStatus(). similarity Logical specifying whether calculate similarity dissimilarity. normalize Logical; TRUE, random star tree expected similarity 0 (difference 1), maximum possible score one. FALSE, zero similarity corresponds quartets contradicted, whereas one corresponds quartets correctly resolved – unattainable reference tree contains polytomies.","code":""},{"path":"/reference/SimilarityMetrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tree similarity measures — SimilarityMetrics","text":"SimilarityMetrics() returns named two-dimensional array row corresponds input tree, column corresponds one listed measures. DoNotConflict() others return named vector describing requested similarity (difference) trees.","code":""},{"path":"/reference/SimilarityMetrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tree similarity measures — SimilarityMetrics","text":"Estabrook1985;textualQuartet (table 2) define four similarity metrics terms  total number quartets (N, Q), number quartets resolved manner two trees (s), number resolved differently trees (d), number resolved tree 1 2 unresolved tree (r1, r2), number unresolved trees (u). similarity metrics given .  dissimilarity metrics complement (.e. 1 - similarity), can calculated algebraically using identity N = s + d + r1 + r2 + u. Although defined using quartets, analogous values can calculated using partitions – though number reasons, quartets may offer meaningful measure amount information shared two trees Smith2020Quartet. Conflict (DC): (s + r1 + r2 + u) / N Explicitly Agree (EA): s / N Strict Joint Assertions (SJA): s / (s + d) SemiStrict Joint Assertions (SSJA): s / (s + d + u) (numerator SemiStrict Joint Assertions similarity metric given Estabrook1985;textualQuartet table 2 s + d, understood, reference text, typographic error.) Steel1993;textualQuartet propose metric, denote d_Q_, package calculates using function SteelPenny(): Steel & Penny's quartet metric (dQ): (s + u) / N Another take tree similarity consider symmetric difference: , number partitions quartets present one tree appear , originally used measure tree similarity Robinson1981;textualQuartet. (Note , given familiarity Robinson–Foulds distance metric, quantity default expressed difference rather similarity.) Raw symmetric difference (RF): d1 + d2 + r1 + r2 pair trees high symmetric difference well-resolved disagree many relationships; agree relationships poorly resolved. , essential contextualize symmetric difference appropriate normalization Smith2019Quartet. Multiple approaches normalization proposed: total number resolved quartets partitions present trees Day1986Quartet: Symmetric Difference (SD): (2 d + r1 + r2) / (2 d + 2 s + r1 + r2) total distinctly resolved quartets partitions Marczewski1958,Day1986Quartet: Marczewski-Steinhaus (MS): (2 d + r1 + r2) / (2 d + s + r1 + r2) maximum number quartets partitions resolved, given number tips Smith2019Quartet: Symmetric Divergence: (d + d + r1 + r2) / N Finally, cases reconstructed tree r1 compared reference tree r2 taken represent \"true\" relationships, symmetric difference desired. settings, desired score expectation given quartet's resolution reconstructed tree \"correct\", given Asher2020;textualTreeTools: Similarity Reference (S2R): (s + (r1 + r2 + u) / 3) / Q may optionally normalized reference maximum possible similarity, (s + d + r2 + (r1 + u) / 3) / Q, subtracting 1/3 (probability matching random) S2R score maximum possible score dividing; , tree scores zero different true tree random fully unresolved tree, one \"true\" can known.","code":""},{"path":[]},{"path":[]},{"path":"/reference/SimilarityMetrics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tree similarity measures — SimilarityMetrics","text":"Martin R. Smith (martin.smith@durham.ac.uk)","code":""},{"path":"/reference/SimilarityMetrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tree similarity measures — SimilarityMetrics","text":"","code":"data(\"sq_trees\")  sq_status <- QuartetStatus(sq_trees) SimilarityMetrics(sq_status) #>                DoNotConflict ExplicitlyAgree StrictJointAssertions #> ref_tree           1.0000000       1.0000000             1.0000000 #> move_one_near      0.9757576       0.9757576             0.9757576 #> move_one_mid       0.8424242       0.8424242             0.8424242 #> move_one_far       0.7696970       0.7696970             0.7696970 #> move_two_near      0.9272727       0.9272727             0.9272727 #> move_two_mid       0.7636364       0.7636364             0.7636364 #> move_two_far       0.7212121       0.7212121             0.7212121 #> collapse_one       1.0000000       0.9757576             1.0000000 #> collapse_some      1.0000000       0.6272727             1.0000000 #> m1mid_col1         0.8424242       0.8181818             0.8385093 #> m1mid_colsome      0.8424242       0.6454545             0.8037736 #> m2mid_col1         0.7636364       0.7393939             0.7577640 #> m2mid_colsome      1.0000000       0.3787879             1.0000000 #> opposite_tree      0.2606061       0.2606061             0.2606061 #> caterpillar        0.7393939       0.7393939             0.7393939 #> top_and_tail       0.3696970       0.3696970             0.3696970 #> anti_pectinate     0.2575758       0.2575758             0.2575758 #> random_tree        0.3151515       0.3151515             0.3151515 #>                SemiStrictJointAssertions SymmetricDifference #> ref_tree                       1.0000000           1.0000000 #> move_one_near                  0.9757576           0.9757576 #> move_one_mid                   0.8424242           0.8424242 #> move_one_far                   0.7696970           0.7696970 #> move_two_near                  0.9272727           0.9272727 #> move_two_mid                   0.7636364           0.7636364 #> move_two_far                   0.7212121           0.7212121 #> collapse_one                   1.0000000           0.9877301 #> collapse_some                  1.0000000           0.7709497 #> m1mid_col1                     0.8385093           0.8282209 #> m1mid_colsome                  0.8037736           0.7159664 #> m2mid_col1                     0.7577640           0.7484663 #> m2mid_colsome                  1.0000000           0.5494505 #> opposite_tree                  0.2606061           0.2606061 #> caterpillar                    0.7393939           0.7393939 #> top_and_tail                   0.3696970           0.3696970 #> anti_pectinate                 0.2575758           0.2575758 #> random_tree                    0.3151515           0.3151515 #>                MarczewskiSteinhaus SteelPenny QuartetDivergence #> ref_tree                 1.0000000  1.0000000         1.0000000 #> move_one_near            0.9526627  0.9757576         0.9757576 #> move_one_mid             0.7277487  0.8424242         0.8424242 #> move_one_far             0.6256158  0.7696970         0.7696970 #> move_two_near            0.8644068  0.9272727         0.9272727 #> move_two_mid             0.6176471  0.7636364         0.7636364 #> move_two_far             0.5639810  0.7212121         0.7212121 #> collapse_one             0.9757576  0.9757576         0.9878788 #> collapse_some            0.6272727  0.6272727         0.8136364 #> m1mid_col1               0.7068063  0.8181818         0.8303030 #> m1mid_colsome            0.5575916  0.6454545         0.7439394 #> m2mid_col1               0.5980392  0.7393939         0.7515152 #> m2mid_colsome            0.3787879  0.3787879         0.6893939 #> opposite_tree            0.1498258  0.2606061         0.2606061 #> caterpillar              0.5865385  0.7393939         0.7393939 #> top_and_tail             0.2267658  0.3696970         0.3696970 #> anti_pectinate           0.1478261  0.2575758         0.2575758 #> random_tree              0.1870504  0.3151515         0.3151515 #>                SimilarityToReference #> ref_tree                   1.0000000 #> move_one_near              0.9757576 #> move_one_mid               0.8424242 #> move_one_far               0.7696970 #> move_two_near              0.9272727 #> move_two_mid               0.7636364 #> move_two_far               0.7212121 #> collapse_one               0.9838384 #> collapse_some              0.7515152 #> m1mid_col1                 0.8262626 #> m1mid_colsome              0.7111111 #> m2mid_col1                 0.7474747 #> m2mid_colsome              0.5858586 #> opposite_tree              0.2606061 #> caterpillar                0.7393939 #> top_and_tail               0.3696970 #> anti_pectinate             0.2575758 #> random_tree                0.3151515 QuartetDivergence(sq_status, similarity = FALSE) #>       ref_tree  move_one_near   move_one_mid   move_one_far  move_two_near  #>     0.00000000     0.02424242     0.15757576     0.23030303     0.07272727  #>   move_two_mid   move_two_far   collapse_one  collapse_some     m1mid_col1  #>     0.23636364     0.27878788     0.01212121     0.18636364     0.16969697  #>  m1mid_colsome     m2mid_col1  m2mid_colsome  opposite_tree    caterpillar  #>     0.25606061     0.24848485     0.31060606     0.73939394     0.26060606  #>   top_and_tail anti_pectinate    random_tree  #>     0.63030303     0.74242424     0.68484848   library(\"TreeTools\", quietly = TRUE, warn.conflict = FALSE) set.seed(0) reference <- CollapseNode(as.phylo(101, 10), 16:18) trees <- c(   reference = reference,   binaryRef = MakeTreeBinary(reference),   balanced = BalancedTree(reference),   pectinate = PectinateTree(reference),   star = StarTree(reference),   random = RandomTree(reference),   random2 = RandomTree(reference) ) elementStatus <- QuartetStatus(trees, reference) SimilarityToReference(elementStatus) #> reference binaryRef  balanced pectinate      star    random   random2  #> 0.7682540 0.7682540 0.3015873 0.3444444 0.3333333 0.3492063 0.4301587  SimilarityToReference(elementStatus, normalize = TRUE) #>   reference   binaryRef    balanced   pectinate        star      random  #>  1.00000000  1.00000000 -0.07299270  0.02554745  0.00000000  0.03649635  #>     random2  #>  0.22262774"},{"path":"/reference/SplitStatus.html","id":null,"dir":"Reference","previous_headings":"","what":"Matching partitions — SplitStatus","title":"Matching partitions — SplitStatus","text":"Calculates many partitions present tree 1 also present tree 2 (s), many partitions tree 1 absent tree 2 (d1), many partitions tree 2 absent tree 1 (d2). Robinson-Foulds (symmetric partition) distance sum latter two quantities, .e. d1 + d2.","code":""},{"path":"/reference/SplitStatus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matching partitions — SplitStatus","text":"","code":"SplitStatus(trees, cf = trees[[1]])  SharedSplitStatus(trees, cf)"},{"path":"/reference/SplitStatus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matching partitions — SplitStatus","text":"trees list trees class phylo, identically labelled tips. cf Comparison tree class phylo.  unspecified, tree compared first tree trees.","code":""},{"path":"/reference/SplitStatus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Matching partitions — SplitStatus","text":"Returns two dimensional array. Rows correspond input trees, named names present. Columns report: N: total number partitions present two trees, .e. P1 + P2. P1: number partitions present tree 1. P2: number partitions present tree 2. s: number partitions present trees. d1: number partitions present tree 1, contradicted tree 2. d2: number partitions present tree 2, contradicted tree 1. r1: number partitions present tree 1, neither present contradicted tree 2. r2: number partitions present tree 2, neither present contradicted tree 1.","code":""},{"path":"/reference/SplitStatus.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Matching partitions — SplitStatus","text":"SharedSplitStatus(): Reports split statistics obtained removing tips occur trees compared.","code":""},{"path":"/reference/SplitStatus.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Matching partitions — SplitStatus","text":"Robinson1981Quartet Penny1985Quartet","code":""},{"path":[]},{"path":"/reference/SplitStatus.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Matching partitions — SplitStatus","text":"Martin R. Smith (martin.smith@durham.ac.uk)","code":""},{"path":"/reference/SplitStatus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Matching partitions — SplitStatus","text":"","code":"data(\"sq_trees\")  # Calculate the status of each quartet splitStatuses <- SplitStatus(sq_trees)  # Calculate the raw symmetric difference (i.e. Robinson–Foulds distance) RawSymmetricDifference(splitStatuses) #>       ref_tree  move_one_near   move_one_mid   move_one_far  move_two_near  #>              0              2              6              8              2  #>   move_two_mid   move_two_far   collapse_one  collapse_some     m1mid_col1  #>              4              6              1              5              7  #>  m1mid_colsome     m2mid_col1  m2mid_colsome  opposite_tree    caterpillar  #>              9              5              5             16              8  #>   top_and_tail anti_pectinate    random_tree  #>             16             16             16   # Normalize the Robinson Foulds distance by dividing by the number of  # splits present in the two trees: RawSymmetricDifference(splitStatuses) / splitStatuses[, \"N\"] #>       ref_tree  move_one_near   move_one_mid   move_one_far  move_two_near  #>     0.00000000     0.12500000     0.37500000     0.50000000     0.12500000  #>   move_two_mid   move_two_far   collapse_one  collapse_some     m1mid_col1  #>     0.25000000     0.37500000     0.06666667     0.45454545     0.46666667  #>  m1mid_colsome     m2mid_col1  m2mid_colsome  opposite_tree    caterpillar  #>     0.69230769     0.33333333     0.45454545     1.00000000     0.50000000  #>   top_and_tail anti_pectinate    random_tree  #>     1.00000000     1.00000000     1.00000000   # Normalize the Robinson Foulds distance by dividing by the total number of  # splits that it is possible to resolve for `n` tips: nTip <- length(sq_trees[[1]]$tip.label) nPartitions <- 2 * (nTip - 3L) # Does not include the nTip partitions that                                 # comprise but a single tip RawSymmetricDifference(splitStatuses) / nPartitions #>       ref_tree  move_one_near   move_one_mid   move_one_far  move_two_near  #>         0.0000         0.1250         0.3750         0.5000         0.1250  #>   move_two_mid   move_two_far   collapse_one  collapse_some     m1mid_col1  #>         0.2500         0.3750         0.0625         0.3125         0.4375  #>  m1mid_colsome     m2mid_col1  m2mid_colsome  opposite_tree    caterpillar  #>         0.5625         0.3125         0.3125         1.0000         0.5000  #>   top_and_tail anti_pectinate    random_tree  #>         1.0000         1.0000         1.0000"},{"path":"/reference/SymmetricDifferenceLineEnds.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot contours of equal symmetric difference on a ternary plot — SymmetricDifferenceLineEnds","title":"Plot contours of equal symmetric difference on a ternary plot — SymmetricDifferenceLineEnds","text":"Assumes tree 1 perfectly resolved, resolution tree 2 can vary.","code":""},{"path":"/reference/SymmetricDifferenceLineEnds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot contours of equal symmetric difference on a ternary plot — SymmetricDifferenceLineEnds","text":"","code":"SymmetricDifferenceLineEnds(nsd)  SymmetricDifferenceLines(nsd, ...)"},{"path":"/reference/SymmetricDifferenceLineEnds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot contours of equal symmetric difference on a ternary plot — SymmetricDifferenceLineEnds","text":"nsd Vector specifying normalized symmetric differences plot. ... parameters pass TernaryLines().","code":""},{"path":"/reference/SymmetricDifferenceLineEnds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot contours of equal symmetric difference on a ternary plot — SymmetricDifferenceLineEnds","text":"Returns matrix dim (length(nsd), 6), columns named r2a, da, sa, r2b, db sb. Lines b row connect points equal symmetric difference.","code":""},{"path":"/reference/SymmetricDifferenceLineEnds.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Plot contours of equal symmetric difference on a ternary plot — SymmetricDifferenceLineEnds","text":"SymmetricDifferenceLines(): Plot lines onto active ternary plot.","code":""},{"path":"/reference/SymmetricDifferenceLineEnds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot contours of equal symmetric difference on a ternary plot — SymmetricDifferenceLineEnds","text":"Martin R. Smith (martin.smith@durham.ac.uk)","code":""},{"path":"/reference/TQDist.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for tqDist — TQDist","title":"Wrapper for tqDist — TQDist","text":"TQDist() TQAE() convenience functions writes list trees text files can processed C implementation tqDist Sand2014Quartet. tqDist called, temporary file deleted analysis complete.","code":""},{"path":"/reference/TQDist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for tqDist — TQDist","text":"","code":"TQDist(trees)  TQAE(trees)"},{"path":"/reference/TQDist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for tqDist — TQDist","text":"trees List phylogenetic trees, class list multiPhylo.","code":""},{"path":"/reference/TQDist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for tqDist — TQDist","text":"TQDist() returns quartet distance pair trees. TQAE() returns number resolved quartets agreement pair trees (\"\" Brodal et al. 2013) number quartets unresolved trees (\"E\" Brodal et al. 2013).","code":""},{"path":"/reference/TQDist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wrapper for tqDist — TQDist","text":"Quartets can resolved one five ways, Brodal2013;textualQuartet Holt2014;textualQuartet distinguish using letters -E, Estabrook1985;textualQuartet refer : s = resolved trees; B d = resolved differently trees; C r1 = resolved tree 1; D r2 = resolved tree 2 (comparison tree); E u = unresolved trees.","code":""},{"path":[]},{"path":[]},{"path":"/reference/TQDist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Wrapper for tqDist — TQDist","text":"Martin R. Smith (martin.smith@durham.ac.uk)","code":""},{"path":"/reference/TQFile.html","id":null,"dir":"Reference","previous_headings":"","what":"tqDist file generator — TQFile","title":"tqDist file generator — TQFile","text":"Creates temporary file corresponding list trees, processed tqDist.  Files destroyed using .exit(file.remove(fileName)) calling function.","code":""},{"path":"/reference/TQFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tqDist file generator — TQFile","text":"","code":"TQFile(treeList)"},{"path":"/reference/TQFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tqDist file generator — TQFile","text":"Name created file","code":""},{"path":"/reference/TQFile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"tqDist file generator — TQFile","text":"now necessary testing purposes.","code":""},{"path":"/reference/ValidateQuartetFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate filenames — ValidateQuartetFile","title":"Validate filenames — ValidateQuartetFile","text":"Verifies file parameters character strings describing files exist","code":""},{"path":"/reference/ValidateQuartetFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate filenames — ValidateQuartetFile","text":"","code":"ValidateQuartetFile(file)"},{"path":"/reference/ValidateQuartetFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate filenames — ValidateQuartetFile","text":"file Variable validate","code":""},{"path":"/reference/ValidateQuartetFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate filenames — ValidateQuartetFile","text":"TRUE file character vector length one describing file exists, fatal error otherwise.","code":""},{"path":"/reference/ValidateQuartetFile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Validate filenames — ValidateQuartetFile","text":"Martin R. Smith (martin.smith@durham.ac.uk)","code":""},{"path":"/reference/VisualizeQuartets.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize quartet difference on trees, by split — VisualizeQuartets","title":"Visualize quartet difference on trees, by split — VisualizeQuartets","text":"Visualize quartet difference trees, split","code":""},{"path":"/reference/VisualizeQuartets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize quartet difference on trees, by split — VisualizeQuartets","text":"","code":"VisualizeQuartets(   tree1,   tree2,   style = \"pie\",   setPar = TRUE,   precision = 3L,   Plot = plot.phylo,   scale = 1L,   spectrum = viridisLite::viridis(101),   legend = TRUE,   ... )"},{"path":"/reference/VisualizeQuartets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize quartet difference on trees, by split — VisualizeQuartets","text":"tree1, tree2 Trees class phylo, identical leaf labels. style Character string specifying split labels unambiguous abbreviation : label: Label stating proportion resolved quartets agreement, coloured accordingly; pie: Pie chart showing proportion quartets agreement, sized according number quartets influenced split; bar: Bar showing proportion quartets agreement, labelled; size: Circle coloured according proportion quartets agreement, area corresponding number quartet statements associated split. setPar Logical specifying whether graphical parameters set display trees side side. precision Integer specifying number significant figures display reporting matching scores. Plot Function use plot trees. scale Numeric, enlargement factor split labels. spectrum 101-element vector specifying range colours colour matches. legend Logical specifying whether display simple legend. ... Additional parameters send Plot().","code":""},{"path":"/reference/VisualizeQuartets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize quartet difference on trees, by split — VisualizeQuartets","text":"VisualizeQuartets() invisibly returns list two elements, named tree1 tree2, containing matrix. row corresponds split within tree; columns correspond : node internal numbering node corresponding split, displayed ape::nodelabels() N, Q, s, d, r1, r2, u status quartet relative split, documented QuartetStatus() res number quartets resolved split, .e. s + d proportion quartets resolved node resolved manner tree; .e. s / s + d","code":""},{"path":"/reference/VisualizeQuartets.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Visualize quartet difference on trees, by split — VisualizeQuartets","text":"Martin R. Smith (martin.smith@durham.ac.uk)","code":""},{"path":"/reference/VisualizeQuartets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize quartet difference on trees, by split — VisualizeQuartets","text":"","code":"library(\"TreeTools\", quietly = TRUE) # Simple plot VisualizeQuartets(BalancedTree(10), CollapseNode(PectinateTree(10), 19),                   style = \"label\")   # Plot with custom graphical parameters origPar <- par(mfrow = c(2, 2)) VisualizeQuartets(BalancedTree(10), CollapseNode(PectinateTree(10), 19),                   setPar = FALSE) VisualizeQuartets(BalancedTree(10), CollapseNode(PectinateTree(10), 19),                   style = \"bar\", legend = FALSE, setPar = FALSE)   # Circle size denotes similarity par(mfrow = c(2, 1), mar = rep(0.1, 4)) vq <- VisualizeQuartets(   tree1 = BalancedTree(20),   tree2 = CollapseNode(PectinateTree(20), 29:33),   style = \"size\", scale = 2,   setPar = FALSE # necessary for node labels to align ) # Manually add custom node labels percentSame <- paste(round(vq[[\"tree2\"]][, \"same\"] * 100, 1), \"%\") nodelabels(percentSame, vq[[\"tree2\"]][, \"node\"],            frame = \"n\", bg = NA, # No frame or background            adj = 0.5 # align label            )              # restore original graphical parameters par(origPar)"},{"path":"/reference/dot-AddSlice.html","id":null,"dir":"Reference","previous_headings":"","what":"Add slice to 3D array — .AddSlice","title":"Add slice to 3D array — .AddSlice","text":"Add slice 3D array","code":""},{"path":"/reference/dot-AddSlice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add slice to 3D array — .AddSlice","text":"","code":".AddSlice(arr, slice, sliceName = NULL)"},{"path":"/reference/dot-AddSlice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add slice to 3D array — .AddSlice","text":"arr Three-dimensional array. slice Two-dimensional matrix add array. sliceName Character vector specifying name new slice.","code":""},{"path":"/reference/dot-AddSlice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add slice to 3D array — .AddSlice","text":"three-dimensional array formed adding slice end arr.","code":""},{"path":"/reference/dot-AddSlice.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add slice to 3D array — .AddSlice","text":"Martin R. Smith (martin.smith@durham.ac.uk)","code":""},{"path":"/reference/dot-CheckSize.html","id":null,"dir":"Reference","previous_headings":"","what":"Check tree size — .CheckSize","title":"Check tree size — .CheckSize","text":"Trees > 477 leaves may counts > .Machine$integer.max reliably evaluated.","code":""},{"path":"/reference/dot-CheckSize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check tree size — .CheckSize","text":"","code":".CheckSize(tree)  # S3 method for class 'phylo' .CheckSize(tree)  # S3 method for class 'list' .CheckSize(tree)  # S3 method for class 'multiPhylo' .CheckSize(tree)"},{"path":"/reference/dot-CheckSize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check tree size — .CheckSize","text":"may possible increase number 568 converting R represents negative integers unsigned equivalent sent C.","code":""},{"path":"/reference/dot-NormalizeStatus.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize element statuses to generate metric — .NormalizeStatus","title":"Normalize element statuses to generate metric — .NormalizeStatus","text":"Handles vectors matrices two three dimensions.","code":""},{"path":"/reference/dot-NormalizeStatus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize element statuses to generate metric — .NormalizeStatus","text":"","code":".NormalizeStatus(elementStatus, numerator, denominator, takeFromOne)"},{"path":"/reference/dot-NormalizeStatus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize element statuses to generate metric — .NormalizeStatus","text":"elementStatus Two-dimensional integer array, rows corresponding counts matching quartets partitions tree, columns named according output QuartetStatus() SplitStatus(). numerator, denominator Character vector listing elements sum numerator / denominator. takeFromOne Logical specifying whether deduct value one.","code":""},{"path":"/reference/dot-StatusToMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Status vector to matrix — .StatusToMatrix","title":"Status vector to matrix — .StatusToMatrix","text":"Converts vector matrix can analysed DoNotConflict() function family.","code":""},{"path":"/reference/dot-StatusToMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Status vector to matrix — .StatusToMatrix","text":"","code":".StatusToMatrix(statusVector)  .StatusToArray(status)"},{"path":"/reference/dot-StatusToMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Status vector to matrix — .StatusToMatrix","text":"statusVector Either () named vector integers, names N, s, r1, r2, either d d1 d2, optionally u; (ii) matrix whose named rows correspond quantities. status named three-dimensional array integers, slices named s, r1, r2, either d d1 d2, either N u.","code":""},{"path":"/reference/dot-StatusToMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Status vector to matrix — .StatusToMatrix","text":"matrix, containing input columns plus 2d, representing either 2 * d d1 + d2, row names. row name means column names dropped output DoNotConflict etc. three-dimensional array containing slice labelled 2d, equivalent either d + d d1 + d2 appropriate.","code":""},{"path":"/reference/dot-StatusToMatrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Status vector to matrix — .StatusToMatrix","text":"Martin R. Smith (martin.smith@durham.ac.uk)","code":""},{"path":"/reference/dot-StatusToMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Status vector to matrix — .StatusToMatrix","text":"","code":"data(\"sq_trees\")  .StatusToArray(ManyToManyQuartetAgreement(sq_trees[5:7])) #> , , N #>  #>               move_two_near move_two_mid move_two_far #> move_two_near           660          660          660 #> move_two_mid            660          660          660 #> move_two_far            660          660          660 #>  #> , , Q #>  #>               move_two_near move_two_mid move_two_far #> move_two_near           330          330          330 #> move_two_mid            330          330          330 #> move_two_far            330          330          330 #>  #> , , s #>  #>               move_two_near move_two_mid move_two_far #> move_two_near           330          228          214 #> move_two_mid            228          330          214 #> move_two_far            214          214          330 #>  #> , , d #>  #>               move_two_near move_two_mid move_two_far #> move_two_near             0          102          116 #> move_two_mid            102            0          116 #> move_two_far            116          116            0 #>  #> , , r1 #>  #>               move_two_near move_two_mid move_two_far #> move_two_near             0            0            0 #> move_two_mid              0            0            0 #> move_two_far              0            0            0 #>  #> , , r2 #>  #>               move_two_near move_two_mid move_two_far #> move_two_near             0            0            0 #> move_two_mid              0            0            0 #> move_two_far              0            0            0 #>  #> , , u #>  #>               move_two_near move_two_mid move_two_far #> move_two_near             0            0            0 #> move_two_mid              0            0            0 #> move_two_far              0            0            0 #>  #> , , 2d #>  #>               move_two_near move_two_mid move_two_far #> move_two_near             0          204          232 #> move_two_mid            204            0          232 #> move_two_far            232          232            0 #>"},{"path":"/reference/sq_trees.html","id":null,"dir":"Reference","previous_headings":"","what":"Eighteen example trees — sq_trees","title":"Eighteen example trees — sq_trees","text":"list class multiPhylo containing phylogenetic trees: ref_tree reference tree, bearing tips labelled 1 11. move_one_near Tip 1 moved short distance. move_one_mid Tip 1 moved . move_one_far Tip 1 moved still. move_two_near Tips 10 & 11 moved short distance. move_two_mid Tips 10 & 11 moved . move_two_far Tips 10 & 11 moved still. collapse_one One node collapsed polytomy. collapse_some Several nodes collapsed. m1mid_col1 Tree move_one_mid one node collapsed. m1mid_colsome Tree move_one_mid several nodes collapsed. m2mid_col1 Tree move_two_mid one node collapsed. m2mid_colsome Tree move_two_mid several nodes collapsed. opposite_tree tree shares fewer quartets ref_tree expected chance. caterpillar pectinate \"caterpillar\" tree. top_and_tail Tree caterpillar, outermost taxa swapped shares partitions caterpillar. anti_pectinate random tree shares partitions caterpillar. random_tree random tree.","code":""},{"path":"/reference/sq_trees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Eighteen example trees — sq_trees","text":"","code":"sq_trees"},{"path":"/reference/sq_trees.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Eighteen example trees — sq_trees","text":"object class multiPhylo length 18.","code":""},{"path":"/reference/tqdist_QuartetDistance.html","id":null,"dir":"Reference","previous_headings":"","what":"Direct entry points to 'tqDist' functions — tqdist_QuartetDistance","title":"Direct entry points to 'tqDist' functions — tqdist_QuartetDistance","text":"Functions calculate triplet quartet distances pairs trees. Input checked sanity.","code":""},{"path":"/reference/tqdist_QuartetDistance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Direct entry points to 'tqDist' functions — tqdist_QuartetDistance","text":"","code":"tqdist_QuartetDistance(file1, file2)  tqdist_QuartetAgreement(file1, file2)  tqdist_QuartetAgreementEdge(edge1, edge2)  tqdist_QuartetAgreementChar(string1, string2)  tqdist_PairsQuartetDistance(file1, file2)  tqdist_OneToManyQuartetAgreement(file1, fileMany)  tqdist_OneToManyQuartetAgreementChar(tree, trees)  tqdist_OneToManyQuartetAgreementEdge(edge, edges)  tqdist_AllPairsQuartetDistance(file)  tqdist_AllPairsQuartetDistanceChar(string)  tqdist_AllPairsQuartetDistanceEdge(edges)  tqdist_AllPairsQuartetAgreement(file)  tqdist_AllPairsQuartetAgreementChar(string)  tqdist_AllPairsQuartetAgreementEdge(edges)  tqdist_TripletDistance(file1, file2)  tqdist_PairsTripletDistance(file1, file2)  tqdist_AllPairsTripletDistance(file)"},{"path":"/reference/tqdist_QuartetDistance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Direct entry points to 'tqDist' functions — tqdist_QuartetDistance","text":"file, file1, file2 Paths files containing tree trees Newick format.","code":""},{"path":"/reference/tqdist_QuartetDistance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Direct entry points to 'tqDist' functions — tqdist_QuartetDistance","text":"distance requested trees.","code":""},{"path":"/reference/tqdist_QuartetDistance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Direct entry points to 'tqDist' functions — tqdist_QuartetDistance","text":"Functions called R user-friendly functions AllPairsQuartetDistance.","code":""},{"path":"/reference/tqdist_QuartetDistance.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Direct entry points to 'tqDist' functions — tqdist_QuartetDistance","text":"tqdist_QuartetAgreement(): Agreement quartet tqdist_QuartetAgreementEdge(): Agreement quartet tqdist_QuartetAgreementChar(): Agreement quartet tqdist_PairsQuartetDistance(): Distance pairs tqdist_OneToManyQuartetAgreement(): Distance pairs tqdist_OneToManyQuartetAgreementChar(): Distance pairs tqdist_OneToManyQuartetAgreementEdge(): Distance pairs tqdist_AllPairsQuartetDistance(): Distance pairs tqdist_AllPairsQuartetDistanceChar(): Distance pairs tqdist_AllPairsQuartetDistanceEdge(): Distance pairs tqdist_AllPairsQuartetAgreement(): Agreement pairs trees tqdist_AllPairsQuartetAgreementChar(): Agreement pairs trees tqdist_AllPairsQuartetAgreementEdge(): Agreement pairs trees tqdist_TripletDistance(): Triplet distance two trees tqdist_PairsTripletDistance(): Triplet distance pairs tqdist_AllPairsTripletDistance(): Triplet distance pairs","code":""},{"path":"/reference/tqdist_QuartetDistance.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Direct entry points to 'tqDist' functions — tqdist_QuartetDistance","text":"Sand2014Quartet","code":""},{"path":"/reference/tqdist_QuartetDistance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Direct entry points to 'tqDist' functions — tqdist_QuartetDistance","text":"Martin R. Smith, Andreas Sand","code":""},{"path":"/news/index.html","id":"quartet-v127-2024-10-31","dir":"Changelog","previous_headings":"","what":"Quartet v1.2.7 (2024-10-31)","title":"Quartet v1.2.7 (2024-10-31)","text":"VizualizeQuartet() now returns calculation results. Use spectrum legend VisualizeQuartet(). Include CSL file within package remove external dependency.","code":""},{"path":"/news/index.html","id":"quartet-v126-2024-02-08","dir":"Changelog","previous_headings":"","what":"Quartet v1.2.6 (2024-02-08)","title":"Quartet v1.2.6 (2024-02-08)","text":"CRAN release: 2024-02-09 Drop obsolete C++11 specification. Update minimum R version 3.5 (Ternary). R <3.6 longer formally supported.","code":""},{"path":"/news/index.html","id":"quartet-v125-2022-07-08","dir":"Changelog","previous_headings":"","what":"Quartet v1.2.5 (2022-07-08)","title":"Quartet v1.2.5 (2022-07-08)","text":"CRAN release: 2022-07-08 Fix memory leaks.","code":""},{"path":"/news/index.html","id":"quartet-v124-2022-05-02","dir":"Changelog","previous_headings":"","what":"Quartet v1.2.4 (2022-05-02)","title":"Quartet v1.2.4 (2022-05-02)","text":"CRAN release: 2022-05-02 QuartetStates() handles absent leaves gracefully. Copy-edit documentation.","code":""},{"path":"/news/index.html","id":"quartet-v123","dir":"Changelog","previous_headings":"","what":"Quartet v1.2.3","title":"Quartet v1.2.3","text":"Replace deprecated function TreeTools::.Splits(). Update test cases readiness TreeTools v1.7.0.","code":""},{"path":"/news/index.html","id":"quartet-v122-2020-12-09","dir":"Changelog","previous_headings":"","what":"Quartet v1.2.2 (2020-12-09)","title":"Quartet v1.2.2 (2020-12-09)","text":"CRAN release: 2020-12-09 Package ‘vdiffr’ now used conditionally.","code":""},{"path":"/news/index.html","id":"quartet-v120-2020-10-22","dir":"Changelog","previous_headings":"","what":"Quartet v1.2.0 (2020-10-22)","title":"Quartet v1.2.0 (2020-10-22)","text":"CRAN release: 2020-10-21","code":""},{"path":"/news/index.html","id":"new-features-1-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Quartet v1.2.0 (2020-10-22)","text":"CompareQuartetsMulti() compares quartet status one tree status multiple others. VisualizeQuartets() depicts contribution splits quartet score. SimilarityToReference() allows comparison specified reference topology.","code":""},{"path":"/news/index.html","id":"changes-1-2-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"Quartet v1.2.0 (2020-10-22)","text":"Deprecate RobinsonFoulds(): renamed RawSymmetricDifference(). QuartetState[s]() now uses sister--4 notation, rather sister--1, give values within [0, 3]. ManyToManyQuartetAgreement() now returns entries N Q.","code":""},{"path":"/news/index.html","id":"improvements-1-2-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"Quartet v1.2.0 (2020-10-22)","text":"Faster C++ implementation AllQuartets() QuartetStates(). QuartetStatus() now supports non-identical leaf samples. SimilarityMetrics() now handles single tree comparisons. Correctly calculate resolution unrooted trees unconventional node numbering conventions. Remove errant name comparing unnamed tree pairs. Small improvements PlotQuartet(). Minor efficiency improvements. Documentation improvements.","code":""},{"path":"/news/index.html","id":"quartet-v110-2020-01-29","dir":"Changelog","previous_headings":"","what":"Quartet v1.1.0 (2020-01-29)","title":"Quartet v1.1.0 (2020-01-29)","text":"CRAN release: 2020-01-28 Pass trees directly C, without writing temporary intermediate file. Use TreeTools place TreeSearch, supporting new Splits class. Facilitate comparison lists multiple trees. Fix Latex error vignettes.","code":""},{"path":"/news/index.html","id":"quartet-v103","dir":"Changelog","previous_headings":"","what":"Quartet v1.0.3","title":"Quartet v1.0.3","text":"CRAN release: 2019-12-30 Remove deprecated C function ptr_fun. Clarify documentation pages.","code":""},{"path":"/news/index.html","id":"quartet-v102","dir":"Changelog","previous_headings":"","what":"Quartet v1.0.2","title":"Quartet v1.0.2","text":"CRAN release: 2019-03-06 Force R 3.5.0-style random number generation examples, ensure backward compatibility. Add caterpillar trees sq_trees, illustrate issues partition-based distance metrics.","code":""},{"path":"/news/index.html","id":"quartet-v101","dir":"Changelog","previous_headings":"","what":"Quartet v1.0.1","title":"Quartet v1.0.1","text":"CRAN release: 2019-01-22 Improved portability C++ code.","code":""},{"path":"/news/index.html","id":"quartet-v100-2019-01-09","dir":"Changelog","previous_headings":"","what":"Quartet v1.0.0 (2019-01-09)","title":"Quartet v1.0.0 (2019-01-09)","text":"CRAN release: 2019-01-16","code":""},{"path":"/news/index.html","id":"new-features-1-0-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Quartet v1.0.0 (2019-01-09)","text":"Add functions generate ternary plots tree similarity measures.","code":""},{"path":"/news/index.html","id":"improvements-1-0-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"Quartet v1.0.0 (2019-01-09)","text":"Use tqDist quartet calculations. Remove single “splits” splits objects. Simplify installation via github_install. Add missing details documentation.","code":""},{"path":"/news/index.html","id":"modifications-1-0-0","dir":"Changelog","previous_headings":"","what":"Modifications","title":"Quartet v1.0.0 (2019-01-09)","text":"Function SimilarityMetrics now takes output QuartetStatus(trees), rather list trees. Function SplitStatus now returns output using column headers QuartetStatus Column N added QuartetStatus output. QuartetMetrics → SimilarityMetrics MatchingSplits → SplitStatus MatchingQuartets → QuartetStatus Choices → AllQuartets","code":""},{"path":[]},{"path":"/news/index.html","id":"modifications-0-2-0","dir":"Changelog","previous_headings":"","what":"Modifications","title":"SlowQuartet v0.2.0 (2017-11-22)","text":"Add MatchingSplits function calculate number splits contradicted / unresolved. Add vignettes document quartet metric may preferable tree distance metrics.","code":""}]
